buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE")
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "jacoco"
apply plugin: 'maven'
apply plugin: 'org.junit.platform.gradle.plugin'

ext.junit4Version        = '4.13.2'
ext.junitVintageVersion  = '5.8.1'
ext.junitPlatformVersion = '1.8.1'
ext.junitJupiterVersion  = '5.8.1'

bootJar {
    baseName = 'tourGuide'
    version =  '1.0.0'
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.compilerArgs += '-parameters'
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {

    compile('org.springframework.boot:spring-boot-starter-web:2.5.5')
    compile('org.springframework.boot:spring-boot-starter-actuator:2.5.5')
    compile group: 'org.javamoney', name: 'moneta', version: '1.3'
    compile group: 'com.jsoniter', name: 'jsoniter', version: '0.9.23'

    compile(name: 'gpsUtil', ext: 'jar')
    compile(name: 'RewardCentral', ext: 'jar')
    compile(name: 'TripPricer', ext: 'jar')

    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.1.6.RELEASE'
    implementation 'io.springfox:springfox-swagger2:3.0.0'
    implementation 'org.projectlombok:lombok:1.18.20'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.0-rc2'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.13.0-rc2'
    testImplementation('org.junit.platform:junit-platform-launcher:1.8.1')
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation ('org.junit.jupiter:junit-jupiter-params:5.8.1')

    // https://mvnrepository.com/artifact/org.junit.platform/junit-platform-surefire-provider
    testImplementation group: 'org.junit.platform', name: 'junit-platform-surefire-provider', version: '1.3.2'


    // JUnit Jupiter API and TestEngine implementation
    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

    // If you also want to support JUnit 3 and JUnit 4 tests
    testCompile("junit:junit:${junit4Version}")
    testRuntime("org.junit.vintage:junit-vintage-engine:${junitVintageVersion}")

    // Only needed to run tests in an (IntelliJ) IDE(A) that bundles an older version
    testRuntime("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")

    // Needed as compile since we're building a JUnit Jupiter extension here
    compile('org.mockito:mockito-core:3.12.4')
    compile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")

    // Needed for @RunWith(JUnitPlatform.class) in the IDE
    testCompile("org.junit.platform:junit-platform-runner:${junitPlatformVersion}")

    implementation 'org.mockito:mockito-junit-jupiter:3.12.4'
    implementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    implementation 'org.junit.platform:junit-platform-commons:1.8.1'
    implementation 'org.junit.platform:junit-platform-engine:1.8.1'

    tasks.test {
        useJUnitPlatform()
        testLogging {
            events("passed", "skipped", "failed")
        }
    }
    implementation 'org.mockito:mockito-core:3.12.4'
    testRuntime "org.junit.platform:junit-platform-console:1.0.0-M2"
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.13.0-rc2'
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.4"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = 0.5
      }
    }
  }
}
